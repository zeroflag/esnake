( Simple Snake game written in Equinox Forth )
( Use Vim keys, H J K L to control )

alias: love.graphics.rectangle~5 draw-rect
alias: math.floor/1 floor
alias: math.random/2 rnd
alias: love.graphics.setColor~3 color

love.graphics.getWidth/0  -> var scr_w
love.graphics.getHeight/0 -> var scr_h

scr_w scr_h / -> var aspect_ratio

50 -> var width
width aspect_ratio / floor -> var height

scr_w width  / -> var cell_w
scr_h height / -> var cell_h

width  2 / floor -> var cx
height 2 / floor -> var cy

var input

$playing -> var state
0.125    -> var refresh_rate

1 -> var vx
0 -> var vy
0 -> var time
0 -> var score

[] -> var snake
{} -> var food

: refresh? ( dt -- bool )
  time + -> time
  time refresh_rate > ;

: reset-timer 0 -> time ;

: len  ( -- n ) snake size ;
: head ( -- p ) snake len @ ;
: cut snake 1 remove ;

: spawn-snake ( len -- )
  2 / floor dup -1 * do
    snake { $x cx i +  $y cy } append
  loop ;

: spawn-food
  1 width  2 - rnd -> food.x
  1 height 2 - rnd -> food.y ;

\ Drawing and graphics

: translate ( x y -- nx ny ) cell_h * swap cell_w * swap ;
: draw-text ( s x y -- ) 0 3 3 love.graphics.print~6 ;

: red   1 0 0 ;
: green 0 1 0 ;
: blue  0 0 1 ;
: white 1 1 1 ;

: draw-block ( x y -- )
  "fill" -rot ( x y ) translate cell_w cell_h draw-rect ;

: draw-snake
  snake ipairs: _ each
    each.x each.y draw-block
  end ;

: draw-food food.x food.y draw-block ;

: draw-cage
  width 0 do
    i 0          draw-block
    i height 1 - draw-block
  loop
  height 0 do
    0         i draw-block
    width 1 - i draw-block
  loop ;

: draw-score "Score: " score .. 0 0 translate draw-text ;

: draw-message
  state $game-over = if
    "Game Over!" cx 3 - cy 1 -
    translate draw-text
  then ;

\ Collision detection

: x= ( p1 p2 -- bool ) $x @ swap $x @ = ;
: y= ( p1 p2 -- bool ) $y @ swap $y @ = ;

: hit? ( point -- bool )
  dup  head x=
  swap head y= and ;

: advance
  snake
  { $x head $x @ vx +
    $y head $y @ vy + }
  append ;

: hit-wall? ( -- bool )
  head $x @ 1 < head $x @ width  1 - >= or
  head $y @ 1 < head $y @ height 1 - >= or
  or ;

: hit-self? ( -- bool )
  len 1 do
    snake i @ hit? if
      true exit
    then
  loop
  false ;

: detect-hit
  hit-wall?
  hit-self? or if
    $game-over -> state
  then
  food hit? if
    spawn-food
    score 1 + -> score
  else
    cut
  then ;

\ Input handling

: turn-left  vx  1 != if -1 -> vx 0 -> vy then ;
: turn-right vx -1 != if  1 -> vx 0 -> vy then ;
: turn-up    vy  1 != if -1 -> vy 0 -> vx then ;
: turn-down  vy -1 != if  1 -> vy 0 -> vx then ;

: control
  input case
    $k of turn-up    endof
    $j of turn-down  endof
    $h of turn-left  endof
    $l of turn-right endof
    drop    ( input )
  endcase ;

\ Love2D callbacks

: love.load
  os.time/0 math.randomseed~1
  true love.window.setFullscreen~1
  spawn-food
  3 spawn-snake ;

: love.draw
  white color draw-message
  green color draw-snake
  blue  color draw-cage
  red   color draw-food
  white color draw-score ;

: love.update (: dt :)
  state $game-over !=
  dt refresh? and if
    control
    advance
    detect-hit
    reset-timer
  then ;

: love.keypressed (: key :)
  $escape key = if os.exit/0 then
  key -> input ;
